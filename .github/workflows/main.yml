name: CI

on:
  push:
    branches:
      - eemrdog-actions

  pull_request:
    branches:
      - dev
  
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      DESTROY_RESOURCES: "false" # Set to "true" to enable resource destruction
      TF_VAR_dt_tenant: ${{ vars.DT_TENANT }}
      TF_VAR_dt_api_token: ${{ secrets.DT_API_TOKEN }}
      TF_VAR_otel_export_enable: "true"
      TF_VAR_name_prefix: "emre-ace-box"
      TF_VAR_extra_vars: |
        {
          "dt_environment_url_gen3": ${{ vars.DT_URL_GEN3 }},
          "dt_oauth_sso_endpoint": ${{ vars.DT_OAUTH_SSO_ENDPOINT }},
          "dt_oauth_client_id": "${{ secrets.DT_OAUTH_CLIENT_ID }}",
          "dt_oauth_client_secret": "${{ secrets.DT_OAUTH_CLIENT_SECRET }}",
          "dt_oauth_account_urn": "${{ secrets.DT_OAUTH_ACCOUNT_URN }}"
        }

    strategy:
      matrix:
        provider: [gcloud] #[aws, azure, gcloud]
        use_case: [
          {
            name: "cert-associate",
            url: "https://github.com/dynatrace-ace/ace-box-ext-cert-associate",
          }
        ]
        include:
          # - provider: aws
          #   working_directory: ./terraform/aws
          #   aws_region: "us-east-2"
          #   aws_instance_type: "t3.xlarge" 
          #   disk_size: 60
          #   acebox_user: "ubuntu"           
          #   associate_eip: "false"
          #   ingress_protocol: "https"
          #   route53_zone_name: "gtm-innovation.com"
          #   route53_private_zone: "false"
          #   skip_domain_workspace_alignment: "true"
          #   backend_config: |
          #     bucket         = "your-terraform-state-bucket"
          #     key            = "path/to/terraform.tfstate"
          #     region         = "us-east-2"
          #     encrypt        = true
          #     dynamodb_table = "your-lock-table"
          - provider: gcloud
            working_directory: ./terraform/gcloud
            gcloud_project: "acl-gsi" #"myGCPProject" # GCP Project you want to use
            gcloud_zone: "europe-west1-b" # zone
            acebox_size: "n2-standard-8"
            managed_zone_name: "ace-innovation-info"
            skip_domain_workspace_alignment: "true"
            backend_config: |
              bucket = "ace-box-tf-state"
              prefix = "ace-box"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Set Custom Domain
      #   id: set_custom_domain
      #   run: echo "::set-output name=custom_domain::${{ matrix.use_case.name }}.ace-innovation.info"

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS_JSON }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      # - name: Create Backend Config
      #   run: |
      #     echo 'terraform {
      #       backend "gcs" {
      #         bucket = "${{ matrix.backend_config.bucket }}"
      #         prefix = "${{ matrix.backend_config.prefix }}"
      #       }
      #     }' > ${{ matrix.working_directory }}/backend.tf

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest

      # - name: Merge Extra Vars
      #   id: merge_extra_vars
      #   run: |
      #     echo "::set-output name=extra_vars::$(jq -s '.[0] * .[1]' <<< '${{ env.TF_VAR_extra_vars }} ${{ fromJSON(matrix.use_case.extra_vars) }}')"

      - name: Terraform Init
        run: terraform init 
        working-directory: ${{ matrix.working_directory }}

      - name: Terraform Plan
        run: terraform plan -out=tfplan -replace="null_resource.provisioner_ace_enable"
        working-directory: ${{ matrix.working_directory }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ matrix.working_directory }}

      - name: Run Tests
        run: |
          # Add your test commands here
          echo "Running tests..."
          # Example: curl -f http://your-service-url/health || exit 1

      - name: Conditional Terraform Destroy
        if: always() && env.DESTROY_RESOURCES == 'true'
        run: terraform destroy -auto-approve -var="region=${{ matrix.region }}" -var="instance_type=${{ matrix.instance_type }}" -var="disk_size=${{ matrix.disk_size }}" -var="acebox_user=${{ matrix.acebox_user }}" -var="associate_eip=${{ matrix.associate_eip }}" -var="custom_domain=${{ steps.set_custom_domain.outputs.custom_domain }}" -var="ingress_protocol=${{ matrix.ingress_protocol }}" -var="route53_zone_name=${{ matrix.route53_zone_name }}" -var="route53_private_zone=${{ matrix.route53_private_zone }}" -var="skip_domain_workspace_alignment=${{ matrix.skip_domain_workspace_alignment }}" -var="extra_vars=${{ steps.merge_extra_vars.outputs.extra_vars }}" -var="use_case=${{ matrix.use_case.url }}"
        working-directory: ${{ matrix.working_directory }}

      - name: Approve PR
        if: success()
        uses: hmarr/auto-approve-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}