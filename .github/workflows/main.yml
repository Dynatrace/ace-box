name: CI

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        provider: [aws, azure, gcloud]
        use_case: [
          {
            name: "use_case_1",
            url: "https://github.com/dynatrace-ace/ace-box-ext-hot-aiops-2024.git@mattermost",
            extra_vars: '{
              "dt_environment_url_gen3": "https://ifj51418.sprint.apps.dynatracelabs.com",
              "dt_oauth_sso_endpoint": "https://sso-sprint.dynatracelabs.com/sso/oauth2/token",
              "dt_oauth_client_id": "${{ secrets.DT_OAUTH_CLIENT_ID }}",
              "dt_oauth_client_secret": "${{ secrets.DT_OAUTH_CLIENT_SECRET }}",
              "dt_oauth_account_urn": "urn:dtaccount:ca29b69b-dad7-4960-985a-7b19ef7bb67d",
              "workflow_actor_id": "6d27520d-7589-4f6a-a111-a41ea0365d11"
            }'
          },
          {
            name: "use_case_2",
            url: "https://github.com/dynatrace-ace/ace-box-ext-hot-aiops-2024.git@another-use-case",
            extra_vars: '{
              "dt_environment_url_gen3": "https://ifj51418.sprint.apps.dynatracelabs.com",
              "dt_oauth_sso_endpoint": "https://sso-sprint.dynatracelabs.com/sso/oauth2/token",
              "dt_oauth_client_id": "${{ secrets.DT_OAUTH_CLIENT_ID }}",
              "dt_oauth_client_secret": "${{ secrets.DT_OAUTH_CLIENT_SECRET }}",
              "dt_oauth_account_urn": "urn:dtaccount:ca29b69b-dad7-4960-985a-7b19ef7bb67d",
              "workflow_actor_id": "6d27520d-7589-4f6a-a111-a41ea0365d11",
              "slack_bot_token": "${{ secrets.SLACK_BOT_TOKEN }}"
            }'
          },
          {
            name: "use_case_3",
            url: "https://github.com/dynatrace-ace/ace-box-ext-hot-aiops-2024.git@third-use-case",
            extra_vars: '{
              "dt_environment_url_gen3": "https://ifj51418.sprint.apps.dynatracelabs.com",
              "dt_oauth_sso_endpoint": "https://sso-sprint.dynatracelabs.com/sso/oauth2/token",
              "dt_oauth_client_id": "${{ secrets.DT_OAUTH_CLIENT_ID }}",
              "dt_oauth_client_secret": "${{ secrets.DT_OAUTH_CLIENT_SECRET }}",
              "dt_oauth_account_urn": "urn:dtaccount:ca29b69b-dad7-4960-985a-7b19ef7bb67d",
              "workflow_actor_id": "6d27520d-7589-4f6a-a111-a41ea0365d11"
            }'
          }
        ]
        include:
          - provider: aws
            working_directory: ./terraform/aws
            region: "us-east-2"
            instance_type: "t3.xlarge"
            disk_size: 60
            acebox_user: "ubuntu"
            associate_eip: "false"
            custom_domain: "hot.gtm-innovation.com"
            ingress_protocol: "https"
            route53_zone_name: "gtm-innovation.com"
            route53_private_zone: "false"
            skip_domain_workspace_alignment: "true"
            backend_config: |
              bucket         = "your-terraform-state-bucket"
              key            = "path/to/terraform.tfstate"
              region         = "us-east-2"
              encrypt        = true
              dynamodb_table = "your-lock-table"
          - provider: azure
            working_directory: ./terraform/azure
            region: "eastus"
            instance_type: "Standard_B2s"
            disk_size: 60
            acebox_user: "azureuser"
            associate_eip: "false"
            custom_domain: "hot.azure-innovation.com"
            ingress_protocol: "https"
            route53_zone_name: "azure-innovation.com"
            route53_private_zone: "false"
            skip_domain_workspace_alignment: "true"
            backend_config: |
              storage_account_name = "yourstorageaccount"
              container_name       = "yourcontainer"
              key                  = "path/to/terraform.tfstate"
          - provider: gcloud
            working_directory: ./terraform/gcloud
            project: "acl-gsi"
            zone: "europe-west1-b"
            size: "n2-standard-8"
            acebox_user: "gclouduser"
            associate_eip: "false"
            custom_domain: "hot.gcloud-innovation.com"
            ingress_protocol: "https"
            route53_zone_name: "gcloud-innovation.com"
            route53_private_zone: "false"
            skip_domain_workspace_alignment: "true"
            backend_config: |
              bucket = "your-terraform-state-bucket"
              prefix = "path/to/terraform.tfstate"

    env:
      TF_VAR_dt_tenant: ${{ secrets.DT_TENANT }}
      TF_VAR_dt_api_token: ${{ secrets.DT_API_TOKEN }}
      TF_VAR_otel_export_enable: "true"
      TF_VAR_name_prefix: "emre-ace-box"
      DESTROY_RESOURCES: "false" # Set to "true" to enable resource destruction

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Create Backend Config
      run: echo "${{ matrix.backend_config }}" > backend.tfvars
      working-directory: ${{ matrix.working_directory }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Terraform Init
      run: terraform init -backend-config=backend.tfvars
      working-directory: ${{ matrix.working_directory }}

    - name: Terraform Plan
      run: terraform plan -out=tfplan -replace="null_resource.provisioner_ace_enable" -var="region=${{ matrix.region }}" -var="instance_type=${{ matrix.instance_type }}" -var="disk_size=${{ matrix.disk_size }}" -var="acebox_user=${{ matrix.acebox_user }}" -var="associate_eip=${{ matrix.associate_eip }}" -var="custom_domain=${{ matrix.custom_domain }}" -var="ingress_protocol=${{ matrix.ingress_protocol }}" -var="route53_zone_name=${{ matrix.route53_zone_name }}" -var="route53_private_zone=${{ matrix.route53_private_zone }}" -var="skip_domain_workspace_alignment=${{ matrix.skip_domain_workspace_alignment }}" -var="extra_vars=${{ matrix.use_case.extra_vars }}" -var="use_case=${{ matrix.use_case.url }}"
      working-directory: ${{ matrix.working_directory }}

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      working-directory: ${{ matrix.working_directory }}

    - name: Run Tests
      run: |
        # Add your test commands here
        echo "Running tests..."
        # Example: curl -f http://your-service-url/health || exit 1

    - name: Conditional Terraform Destroy
      if: always() && env.DESTROY_RESOURCES == 'true'
      run: terraform destroy -auto-approve -var="region=${{ matrix.region }}" -var="instance_type=${{ matrix.instance_type }}" -var="disk_size=${{ matrix.disk_size }}" -var="acebox_user=${{ matrix.acebox_user }}" -var="associate_eip=${{ matrix.associate_eip }}" -var="custom_domain=${{ matrix.custom_domain }}" -var="ingress_protocol=${{ matrix.ingress_protocol }}" -var="route53_zone_name=${{ matrix.route53_zone_name }}" -var="route53_private_zone=${{ matrix.route53_private_zone }}" -var="skip_domain_workspace_alignment=${{ matrix.skip_domain_workspace_alignment }}" -var="extra_vars=${{ matrix.use_case.extra_vars }}" -var="use_case=${{ matrix.use_case.url }}"
      working-directory: ${{ matrix.working_directory }}

    - name: Approve PR
      if: success()
      uses: hmarr/auto-approve-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
