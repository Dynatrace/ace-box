configs:
  - id: application
    config:
      name:
        type: compound
        format: "{{ .appName }} - {{ .appEnvironment }}"
        references:
          - appName
          - appEnvironment
      template: application.json
      parameters:
        appName:
          value: TEMPLATE_APP_NAME
          type: value
        appEnvironment:
          value: TEMPLATE_APP_ENVIRONMENT
          type: value
    type:
      api: application-web
  - id: application-detection-rule
    config:
      name:
        configType: application-web
        configId: application
        property: name
        type: reference
      template: application-detection-rule.json
      parameters:
        applicationId:
          configType: application-web
          configId: application
          property: id
          type: reference
        pattern:
          value: TEMPLATE_APP_URL_PATTERN
          type: value
    type:
      api: app-detection-rule
  - id: management-zone
    config:
      name:
        value: TEMPLATE_K8S_NAMESPACE
        type: value
      parameters:
        environment:
          value: TEMPLATE_K8S_NAMESPACE
          type: value
      template: management-zone.json
      skip: false
    type:
      api: management-zone
  - id: dashboard
    config:
      name:
        value: TEMPLATE_APP_NAME
        type: value
      parameters:
        managementZoneId:
          configType: management-zone
          configId: management-zone
          property: id
          type: reference
        managementZoneName:
          configType: management-zone
          configId: management-zone
          property: name
          type: reference
        sloId:
          configType: slo
          configId: availability-slo
          property: id
          type: reference
        healthCheckId:
          configType: synthetic-monitor
          configId: health-check
          property: id
          type: reference
      template: dashboard.json
      skip: false
    type:
      api: dashboard
  - id: health-check
    config:
      name:
        type: compound
        format: "{{ .appName }} health-check"
        references:
          - appName
      parameters:
        appName:
          value: TEMPLATE_APP_NAME
          type: value
        description:
          type: compound
          format: "Health check for {{ .appName }}"
          references:
            - appName
        location:
          project: projects.global
          configType: synthetic-location
          configId: synthetic-location
          property: id
          type: reference
        tag:
          value: TEMPLATE_K8S_NAMESPACE
          type: value
        url:
          value: TEMPLATE_HEALTH_CHECK_URL
          type: value
        managementZoneId:
          configType: management-zone
          configId: management-zone
          property: id
          type: reference
      template: health-check-monitor.json
    type:
      api: synthetic-monitor
  - id: availability-slo
    config:
      name:
        type: compound
        format: "{{ .appName }} Availability"
        references:
          - appName
      parameters:
        appName:
          value: TEMPLATE_APP_NAME
          type: value
        description:
          type: compound
          format: "Availability SLO for {{ .appName }}"
          references:
            - appName
        metricName:
          type: compound
          format: "{{ .appName }}_availability"
          references:
            - appName
        syntheticCheck:
          configType: synthetic-monitor
          configId: health-check
          property: id
          type: reference
        availabilityTarget:
          value: 95
          type: value
        availabilityTargetWarn:
          value: 97
          type: value
      template: slo-availability.json
    type:
      api: slo

  # srg
  - id: simplenodeguardian
    type:
      settings:
        schema: app:dynatrace.site.reliability.guardian:guardians
        scope: environment
    config:
      name: "New App Guardian for App Onboarding"
      template: srg.json
      parameters:
        description: "Simplenode Guardian for ACE Demo - created by Monaco"
        tags:
          type: list
          values:
            - "stage:staging"
            - "owner:ace"
            - "app:simplenode"
        # objective - dql - response time
        objective_name_dql: "Response Time of API Method"
        dqlQuery: "fetch logs\n| filter dt.process.name == \"simplenodeservice.simplenode-gitlab-staging\"\n| filter k8s.namespace.name == \"simplenode-gitlab-staging\"\n| filter matchesPhrase(content, \"/api/invoke\")\n| parse content, \"DATA '/api/' DATA 'rt:' SPACE? FLOAT:responsetime \" \n| filter isNotNull(responsetime) \n| summarize median(responsetime), alias:response_time "
        comparisonOperator: "LESS_THAN_OR_EQUAL"
        failure_dql: 500
        warning_dql: 400

        # objective - slo - availability
        objective_name_slo_availability: "Availability of Service"
        reference_slo_availability: ["slo", "availability-slo", "name"]
        reference_slo_metric_availability:
          type: compound
          format: "func:slo.{{ .reference_slo_availability }}"
          references:
            - reference_slo_availability
        failure_slo_availability: 98
        warning_slo_availability: 99
        # objective - slo - process cpu usage
        objective_name_dql_cpu_usage: "Process Group Instance CPU Usage"
        dqlQuery_cpu_usage: "timeseries cpu=avg(dt.process.cpu.usage), by:{dt.entity.process_group, host.name} \n| lookup [fetch dt.entity.process_group], sourceField:dt.entity.process_group, lookupField:id \n| filter matchesPhrase(lookup.entity.name,\"simplenode-gitlab-staging\") \n| fields usageCpuAvg = arrayAvg(cpu) \n| summarize cpuUsageAvg = max(usageCpuAvg)  "
        failure_dql_cpu_usage: 0.4
        warning_dql_cpu_usage: 0.3
      skip: false

  # workflow
  - id: simplenodeworkflow
    config:
      name: New App SRG Evaluation
      template: workflow.json
      skip: false
      parameters:
        #wf related
        wf_description: "New App Workflow with Guardians by Monaco"
        wf_isPrivate: false

        #srg related
        srg_task_description: "Evaluate simplenode app guardian objectives"
        guardian_id:
          configType: app:dynatrace.site.reliability.guardian:guardians
          property: id
          type: reference
          configId: simplenodeguardian

    type:
      automation:
        resource: workflow