{
  "title": "{{ .name }}",
  "description": "",
  "tasks": {
    "launch_demo": {
      "name": "launch_demo",
      "description": "Launch a job template in Red Hat Ansible Automation Controller",
      "action": "dynatrace.redhat.ansible:launch-job-template",
      "input": {
        "templateId": "{{ .templateId }}",
        "connectionId": "{{ .connectionId }}"
      },
      "position": {
        "x": 0,
        "y": 1
      },
      "predecessors": []
    },
    "mark_demo_start": {
      "name": "mark_demo_start",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "import { execution } from '@dynatrace-sdk/automation-utils'\nimport { businessEventsClient } from \"@dynatrace-sdk/client-classic-environment-v2\"\n\nexport default async function ({ execution_id }) {\n  const ex = await execution(execution_id)\n\n  const workflow = ex.workflow\n  const executionId = execution_id\n\n  const data = await businessEventsClient.ingest({\n    type: \"application/cloudevent+json\",\n    body: {\n      id: crypto.randomUUID(),\n      specversion: \"1.0\",\n      source: workflow,\n      type: \"acebox.demo.started\",\n      dataschema: \"http://dynatrace.com/schema/bizevents/generic/1.0\",\n      data: {\n        executionId\n      }\n    }\n  })\n}\n"
      },
      "active": {{ .validationEnabled }},
      "position": {
        "x": 0,
        "y": 2
      },
      "predecessors": ["launch_demo"],
      "conditions": {
        "states": {
          "launch_demo": "OK"
        },
        "custom": "{{`{{ result(\"launch_demo\").failed == false }}`}}"
      }
    },
    "wait_for_demo": {
      "name": "wait_for_demo",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "import { queryExecutionClient } from \"@dynatrace-sdk/client-query\"\n\nconst DEMO_RUN_TIME_M = {{ .demoRunTimeM }}\n\nexport default async function ({ execution_id }) {\n  const query = `fetch bizevents|filter event.type == \"acebox.demo.started\" and executionId == \"${execution_id}\"`\n  \n  const queryTimeout = 60\n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: queryTimeout * 1000, fetchTimeoutSeconds: queryTimeout  } })\n  \n  const records = response?.result?.records\n  if (!records || records.length < 1) {\n    throw new Error(\"no records available yet\")\n  }\n\n  const record = records[0]\n\n  const currentTime = (new Date()).getTime()\n  \n  const testRunTimeMs = DEMO_RUN_TIME_M * 60 * 1000\n  const endTime = (new Date(record.timestamp)).getTime() + testRunTimeMs\n  \n  const timeDiffS = Math.floor((endTime - currentTime) / 1000)\n    \n  if (timeDiffS > 0) {\n    throw new Error(`waiting for another ${timeDiffS} seconds`)\n  }\n  \n  return record\n}"
      },
      "position": {
        "x": 0,
        "y": 3
      },
      "predecessors": ["mark_demo_start"],
      "conditions": {
        "states": {
          "mark_demo_start": "SUCCESS"
        }
      },
      "retry": {
        "count": 19,
        "delay": 180,
        "failedLoopIterationsOnly": true
      },
      "timeout": 3600
    },
    "run_validation": {
      "name": "run_validation",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "import { functions } from '@dynatrace-sdk/adhoc-utils'\n\nconst NOTEBOOK_ID = \"{{ .validationNotebookId }}\"\nconst GROUP_ID = \"{{ .validationGroupId }}\"\nconst APP_ID = \"my.dt.pegasys\"\nconst FUNCTION_NAME = \"v1/evaluations/grade-evaluation\"\n\nexport default async function ({ execution_id }) {\n  const data = {\n    \"notebookId\": NOTEBOOK_ID,\n    \"participantId\": GROUP_ID\n  }\n  \n  const result = await functions.call(APP_ID, FUNCTION_NAME, data).then((res) => res.text())\n  return JSON.parse(result)\n}"
      },
      "position": {
        "x": 0,
        "y": 4
      },
      "predecessors": ["wait_for_demo"],
      "conditions": {
        "states": {
          "wait_for_demo": "OK"
        }
      }
    },
    "wait_for_validation": {
      "name": "wait_for_validation",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "const TIMEOUT_MS = 60 * 1000\n  \nexport default async function () {\n  return await new Promise(resolve => setTimeout(resolve, TIMEOUT_MS))\n}"
      },
      "position": {
        "x": 0,
        "y": 5
      },
      "predecessors": ["run_validation"],
      "conditions": {
        "states": {
          "run_validation": "OK"
        }
      }
    },
    "query_validation_result": {
      "name": "query_validation_result",
      "action": "dynatrace.automations:execute-dql-query",
      "description": "Executes DQL query",
      "input": {
        "query": "{{`fetch bizevents\n| filter type == \"EvaluationGrading.SummaryResult\"\n| filter executionId == \"{{ result('run_validation').data.executionId }}\"\n| fields notebookName, percentageScore`}}"
      },
      "position": {
        "x": 0,
        "y": 6
      },
      "predecessors": ["wait_for_validation"],
      "conditions": {
        "states": {
          "wait_for_validation": "OK"
        }
      }
    },
    "report_validation_failure": {
      "name": "report_validation_failure",
      "action": "dynatrace.slack:slack-send-message",
      "description": "Send a message to a Slack workspace",
      "input": {
        "channel": "{{ .slackChannel }}",
        "message": "{{`Failed VALIDATION: {{ execution().title }}`}}",
        "reaction": [],
        "connection": "{{ .slackConnectionId }}",
        "workflowID": "{{`{{ execution().workflow.id }}`}}",
        "channelType": "expression",
        "executionID": "{{`{{ execution().id }}`}}",
        "executionDate": "{{`{{ execution().started_at }}`}}",
        "appendToThread": false,
        "selectedRequestType": 0,
        "attachmentToggleValue": "none"
      },
      "position": {
        "x": 0,
        "y": 7
      },
      "predecessors": ["query_validation_result"],
      "conditions": {
        "states": {
          "query_validation_result": "OK"
        },
        "custom": "{{`{{ result(\"query_validation_result\").records[0].percentageScore < 99 }}`}}"
      }
    },
    "report_launch_failure": {
      "name": "report_launch_failure",
      "action": "dynatrace.slack:slack-send-message",
      "description": "Send a message to a Slack workspace",
      "input": {
        "channel": "{{ .slackChannel }}",
        "message": "{{`Failed LAUNCH: {{ execution().title }}`}}",
        "reaction": [],
        "connection": "{{ .slackConnectionId }}",
        "workflowID": "{{`{{ execution().workflow.id }}`}}",
        "channelType": "expression",
        "executionID": "{{`{{ execution().id }}`}}",
        "executionDate": "{{`{{ execution().started_at }}`}}",
        "appendToThread": false,
        "selectedRequestType": 0,
        "attachmentToggleValue": "none"
      },
      "position": {
        "x": 1,
        "y": 2
      },
      "predecessors": ["launch_demo"],
      "conditions": {
        "states": {
          "launch_demo": "OK"
        },
        "custom": "{{`{{ result(\"launch_demo\").failed != false }}`}}"
      }
    }
  },
  "isPrivate": false,
  "trigger": {
    "schedule": {
      "rule": null,
      "trigger": {
        "type": "time",
        "time": "{{ .triggerTime }}"
      },
      "timezone": "Europe/Amsterdam",
      "isActive": true,
      "isFaulty": false,
      "filterParameters": {},
      "inputs": {}
    }
  },
  "schemaVersion": 3
}
