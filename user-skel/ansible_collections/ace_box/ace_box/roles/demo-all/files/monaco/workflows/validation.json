{
  "title": "{{ .name }}",
  "tasks": {
    "fail": {
      "name": "fail",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "// optional import of sdk modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\n\nexport default async function ({ execution_id }) {\n  // your code goes here\n  // e.g. get the current execution\n  const ex = await execution(execution_id);\n  console.log('Automated script execution on behalf of', ex.trigger);\n\n  return { triggeredBy: ex.trigger };\n}"
      },
      "position": {
        "x": 1,
        "y": 4
      },
      "predecessors": ["query_result"],
      "conditions": {
        "states": {
          "query_result": "OK"
        },
        "custom": "{{`{{ result(\"query_result\").records[0].percentageScore < 99 }}`}}"
      }
    },
    "success": {
      "name": "success",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "// optional import of sdk modules\nimport { execution } from '@dynatrace-sdk/automation-utils';\n\nexport default async function ({ execution_id }) {\n  // your code goes here\n  // e.g. get the current execution\n  const ex = await execution(execution_id);\n  console.log('Automated script execution on behalf of', ex.trigger);\n\n  return { triggeredBy: ex.trigger };\n}"
      },
      "position": {
        "x": -1,
        "y": 4
      },
      "predecessors": ["query_result"],
      "conditions": {
        "states": {
          "query_result": "OK"
        },
        "custom": "{{`{{ result(\"query_result\").records[0].percentageScore >= 99 }}`}}"
      }
    },
    "query_result": {
      "name": "query_result",
      "action": "dynatrace.automations:execute-dql-query",
      "description": "Executes DQL query",
      "input": {
        "query": "{{`fetch bizevents\n| filter type == \"EvaluationGrading.SummaryResult\"\n| filter executionId == \"{{ result('run_validation').data.executionId }}\"\n| fields notebookName, percentageScore`}}"
      },
      "position": {
        "x": 0,
        "y": 3
      },
      "predecessors": ["wait_for_result"],
      "conditions": {
        "states": {
          "wait_for_result": "OK"
        }
      }
    },
    "run_validation": {
      "name": "run_validation",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "import { functions } from '@dynatrace-sdk/adhoc-utils';\n\nconst APP_ID = \"my.dt.pegasys\"\nconst FUNCTION_NAME = \"v1/evaluations/grade-evaluation\"\nconst NOTEBOOK_ID = \"{{ .validationNotebookId }}\"\nconst GROUP_ID = \"{{ .groupId }}\"\n\nexport default async function ({ execution_id }) {\n  const data = {\n    \"notebookId\": NOTEBOOK_ID,\n    \"participantId\": GROUP_ID\n  }\n  \n  const result = await functions.call(APP_ID, FUNCTION_NAME, data).then((res) => res.text());\n  return JSON.parse(result)\n}"
      },
      "position": {
        "x": 0,
        "y": 1
      },
      "predecessors": []
    },
    "wait_for_result": {
      "name": "wait_for_result",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "const TIMEOUT_MS = 60 * 1000\n  \nexport default async function () {\n  return await new Promise(resolve => setTimeout(resolve, TIMEOUT_MS))\n}"
      },
      "position": {
        "x": 0,
        "y": 2
      },
      "predecessors": ["run_validation"],
      "conditions": {
        "states": {
          "run_validation": "OK"
        }
      }
    }
  },
  "description": "",
  "ownerType": "USER",
  "isPrivate": false,
  "trigger": {
    "schedule": {
      "rule": null,
      "trigger": {
        "type": "time",
        "time": "{{ .triggerTime }}"
      },
      "timezone": "Europe/Amsterdam",
      "isActive": true,
      "isFaulty": false,
      "filterParameters": {},
      "inputs": {}
    }
  },
  "schemaVersion": 3
}
