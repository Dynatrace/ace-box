include:
  - remote: "https://gitlab.com/dynatrace-ace/dynatrace-gitlab-library/-/raw/master/dynatrace_event.yaml"

variables:
  #build and deploy
  BUILD_ID:
    value: "1"
    description: "Build ID. Please set to 1, 2, 3 or 4."

  RELEASE_VERSION: "$BUILD_ID.0.0"
  RELEASE_BUILD_VERSION: "$BUILD_ID.0.0-$CI_COMMIT_SHORT_SHA"

  STAGE_NAME_STAGING: "staging"
  STAGE_NAME_PROD: "prod"
  STAGE_NAME: "$STAGE_NAME_STAGING" # default

  RELEASE_PRODUCT: "simplenodeservice"
  RELEASE_STAGE: "simplenode-gitlab-$STAGE_NAME"

  IMAGE_NAME: "$DOCKER_REGISTRY_URL/$RELEASE_PRODUCT"
  IMAGE_TAG: "$RELEASE_BUILD_VERSION"
  #monaco
  MANIFEST_FILE: ./monaco/manifest.yaml
  MONACO_IMAGE_VERSION: 2.3.0
  #dta and srg
  DTA_IMAGE_VERSION: latest
  SRG_EVALUATION_SERVICE: "$RELEASE_PRODUCT"
  SRG_EVALUATION_STAGE: "$STAGE_NAME_STAGING"
  TEST_TIMEFRAME: "5m"

stages:
  - Build and Initialize
  - Deploy Staging
  - Test
  - Validate Release
  - Deploy Production
  - Cleanup
  - otel-exporter

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "api"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"

.monaco_common:
  image: dynatrace/dynatrace-configuration-as-code:$MONACO_IMAGE_VERSION
  variables:
    DT_OWNER_IDENTIFIER: "$RELEASE_PRODUCT-$DEMO_IDENTIFIER"
    GITLAB_PROJECT_ID: "$CI_PROJECT_ID"
    GITLAB_DEFAULT_ASSIGNEE_ID: "$GITLAB_USER_ID"

.deployment_common:
  image: dtzar/helm-kubectl
  script:
    - echo "BUILD_ID $BUILD_ID is being deployed to $RELEASE_STAGE namespace"
    - >
      helm upgrade --install $RELEASE_PRODUCT helm/simplenodeservice 
      --set image="$IMAGE_NAME:$IMAGE_TAG" 
      --set domain="$INGRESS_DOMAIN" 
      --set version="$RELEASE_VERSION" 
      --set build_version="$RELEASE_BUILD_VERSION" 
      --set environment="$RELEASE_STAGE" 
      --set dt_owner="$RELEASE_PRODUCT-$DEMO_IDENTIFIER" 
      --namespace "$RELEASE_STAGE" --create-namespace 
      --wait
    - sleep 150

.dt_deployment_event_common:
  extends: .dynatrace_event
  variables:
    DYNATRACE_ENV_URL: "$DT_TENANT_URL"
    DYNATRACE_API_TOKEN: "$DT_API_TOKEN"
    DESCRIPTION: "$RELEASE_PRODUCT $RELEASE_BUILD_VERSION deployed"
    CUSTOM_PROPERTIES: '{"namespace":"$RELEASE_STAGE"}'
    EVENT_TYPE: "CUSTOM_DEPLOYMENT"
    DEPLOYMENT_NAME: "$RELEASE_STAGE"
    DEPLOYMENT_VERSION: "$RELEASE_BUILD_VERSION"
    REMEDIATION_ACTION: "Ansible Tower"
    DT_NAMESPACE: "$RELEASE_STAGE"
    DT_RELEASE_VERSION: "$RELEASE_VERSION"
    DT_RELEASE_PRODUCT: "$RELEASE_PRODUCT"
    DT_RELEASE_STAGE: "$RELEASE_STAGE"
    DT_RELEASE_BUILD_VERSION: "$RELEASE_BUILD_VERSION"

.dt_config_event_common:
  extends: .dynatrace_event
  variables:
    DYNATRACE_ENV_URL: "$DT_TENANT_URL"
    DYNATRACE_API_TOKEN: "$DT_API_TOKEN"
    EVENT_TYPE: "CUSTOM_CONFIGURATION"
    ATTACH_RULES_FILE: "dynatrace/dynatrace.host-attachrules.yaml"
    DT_HOST_TAG: "$RELEASE_STAGE-$DEMO_IDENTIFIER"
    DESCRIPTION: "Monaco deployment successful: $RELEASE_STAGE"
    CONFIGURATION: "$RELEASE_STAGE"
    CUSTOM_PROPERTIES: '{"Approved by": "ACE"}'

Build Image:
  image: docker:20.10.16
  stage: Build and Initialize
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 0
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    DOCKER_DAEMON_OPTIONS: "--insecure-registry=$DOCKER_REGISTRY_URL"
  services:
    - name: docker:20.10.16-dind
      entrypoint: ["sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS"]
  before_script:
    - until docker info; do sleep 1; done
  script:
    - docker info
    - docker build --build-arg BUILD_NUMBER="$BUILD_ID" -t "$IMAGE_NAME:$IMAGE_TAG" .
    - docker push "$IMAGE_NAME:$IMAGE_TAG"

1-Configure DT Staging - Monaco:
  extends:
    - .monaco_common
  stage: Deploy Staging
  variables:
    STAGE_NAME: "$STAGE_NAME_STAGING"
  script:
    # Infrastructure related configurations
    - MONACO_FEAT_AUTOMATION_RESOURCES=1 monaco deploy $MANIFEST_FILE --project infrastructure --group staging --dry-run
    - MONACO_FEAT_AUTOMATION_RESOURCES=1 monaco deploy $MANIFEST_FILE --project infrastructure --group staging
    # Wait for infrastructure configurations to be fulfilled before deploying app configurations
    - sleep 20 # You can adjust the wait time if this is not enough
    # Remaining configurations
    - MONACO_FEAT_AUTOMATION_RESOURCES=1 monaco deploy $MANIFEST_FILE --group staging --dry-run
    - MONACO_FEAT_AUTOMATION_RESOURCES=1 monaco deploy $MANIFEST_FILE --group staging
    # Sleep an additional (90 + delay for the start of the next jobs) to give Dynatrace some time
    # to tag host according to current config before sending config events
    - sleep 90

2-Send DT Config Event Staging:
  extends: .dt_config_event_common
  stage: Deploy Staging
  variables:
    STAGE_NAME: "$STAGE_NAME_STAGING"
  needs: ["1-Configure DT Staging - Monaco"]

3-Deploy App Staging:
  variables:
    STAGE_NAME: "$STAGE_NAME_STAGING"
  stage: Deploy Staging
  needs: ["1-Configure DT Staging - Monaco"]
  extends:
    - .deployment_common

4-Send DT Deploy Event Staging:
  extends: .dt_deployment_event_common
  stage: Deploy Staging
  needs: ["3-Deploy App Staging"]

Run Tests:
  before_script:
    - echo $(date -u +"%Y-%m-%dT%H:%M:%SZ") > srg.test.starttime
  after_script:
    - echo $(date -u +"%Y-%m-%dT%H:%M:%SZ") > srg.test.endtime
  stage: Test
  variables:
    LOCUST_LOCUSTFILE: locust/locustfile.py
    LOCUST_CONFIG: locust/locust.conf
    LOCUST_HOST: "http://simplenodeservice-$RELEASE_STAGE.$INGRESS_DOMAIN"
    LOCUST_LOAD_TEST_NAME: "Loadtest - $RELEASE_BUILD_VERSION"
  image: locustio/locust
  script:
    - echo "BUILD_ID $BUILD_ID is being tested"
    - locust --config $LOCUST_CONFIG --locustfile $LOCUST_LOCUSTFILE --host $LOCUST_HOST --run-time $TEST_TIMEFRAME
  artifacts:
    paths:
      - srg.test.starttime
      - srg.test.endtime

Validate Release with SRG:
  image: dynatraceace/dt-automation-cli:$DTA_IMAGE_VERSION
  stage: Validate Release
  variables:
    DYNATRACE_URL_GEN3: $DT_PLATFORM_TENANT_URL
    ACCOUNT_URN: $DT_OAUTH_ACCOUNT_URN
    DYNATRACE_CLIENT_ID: $DT_OAUTH_CLIENT_ID
    DYNATRACE_SECRET: $DT_OAUTH_CLIENT_SECRET
    DYNATRACE_SSO_URL: $DT_OAUTH_SSO_ENDPOINT
    SRG_EVALUATION_STOP_ON_FAILURE: "false"
  script:
    - echo "BUILD_ID $BUILD_ID is being evaluated via Site Reliability Guardian"
    - eval_start=$(cat srg.test.starttime)
    - eval_end=$(cat srg.test.endtime)
    - export LOG_LEVEL=verbose
    - dta srg evaluate --service $SRG_EVALUATION_SERVICE --stage $SRG_EVALUATION_STAGE --start-time=$eval_start --end-time=$eval_end --stop-on-failure

1-Configure DT Production - Monaco:
  extends:
    - .monaco_common
  stage: Deploy Production
  variables:
    STAGE_NAME: "$STAGE_NAME_PROD"
  script:
    # Infrastructure related configurations
    - MONACO_FEAT_AUTOMATION_RESOURCES=1 monaco deploy $MANIFEST_FILE --project infrastructure --group production --dry-run
    - MONACO_FEAT_AUTOMATION_RESOURCES=1 monaco deploy $MANIFEST_FILE --project infrastructure --group production
      # Wait for infrastructure configurations to be fulfilled before deploying app configurations
    - sleep 20 # You can adjust the wait time if this is not enough
    # App related configurations
    - MONACO_FEAT_AUTOMATION_RESOURCES=1 monaco deploy $MANIFEST_FILE --project app --group production --dry-run
    - MONACO_FEAT_AUTOMATION_RESOURCES=1 monaco deploy $MANIFEST_FILE --project app --group production
    # Sleep an additional (90 + delay for the start of the next jobs) to give Dynatrace some time
    # to tag host according to current config before sending config events
    - sleep 90

2-Send DT Config Event Production:
  extends: .dt_config_event_common
  stage: Deploy Production
  variables:
    STAGE_NAME: "$STAGE_NAME_PROD"
  needs: ["1-Configure DT Production - Monaco"]

3-Deploy App Production:
  variables:
    STAGE_NAME: "$STAGE_NAME_PROD"
  stage: Deploy Production
  needs: ["1-Configure DT Production - Monaco"]
  extends:
    - .deployment_common

4-Send DT Deploy Event Production:
  extends: .dt_deployment_event_common
  stage: Deploy Production
  variables:
    STAGE_NAME: "$STAGE_NAME_PROD"
  needs: ["3-Deploy App Production"]

Cleanup DT Configs - Monaco:
  image: dynatrace/dynatrace-configuration-as-code:$MONACO_IMAGE_VERSION
  stage: Build and Initialize
  script:
    - RELEASE_STAGE="simplenode-gitlab-$STAGE_NAME_STAGING"
    - sed -e "s/\$RELEASE_STAGE/$RELEASE_STAGE/g" -e "s/\$DEMO_IDENTIFIER/$DEMO_IDENTIFIER/g" -e "s/\$RELEASE_PRODUCT/$RELEASE_PRODUCT/g" ./monaco/delete-app.yaml > ./monaco/delete-app-staging-optimized.yaml
    - RELEASE_STAGE="simplenode-gitlab-$STAGE_NAME_PROD"
    - sed -e "s/\$RELEASE_STAGE/$RELEASE_STAGE/g" -e "s/\$DEMO_IDENTIFIER/$DEMO_IDENTIFIER/g" -e "s/\$RELEASE_PRODUCT/$RELEASE_PRODUCT/g" ./monaco/delete-app.yaml > ./monaco/delete-app-prod-optimized.yaml
    - MONACO_FEAT_AUTOMATION_RESOURCES=1 monaco delete --manifest $MANIFEST_FILE --file ./monaco/delete-app-prod-optimized.yaml --group production
    - MONACO_FEAT_AUTOMATION_RESOURCES=1 monaco delete --manifest $MANIFEST_FILE --file ./monaco/delete-app-staging-optimized.yaml --group staging

    - sleep 15 # wait for the deletion to be completed before the dependent configs are deleted
    - sed -e "s/\$DEMO_IDENTIFIER/$DEMO_IDENTIFIER/g" ./monaco/delete-infra.yaml > ./monaco/delete-infra-optimized.yaml
    - MONACO_FEAT_AUTOMATION_RESOURCES=1 monaco delete --manifest $MANIFEST_FILE --file ./monaco/delete-infra-optimized.yaml --group production
    - MONACO_FEAT_AUTOMATION_RESOURCES=1 monaco delete --manifest $MANIFEST_FILE --file ./monaco/delete-infra-optimized.yaml --group staging
  when: manual

otel-exporter:
  rules:
    - when: always
  stage: otel-exporter
  inherit:
    variables: true
  variables:
    CI_PARENT_PIPELINE: $CI_PIPELINE_ID
  trigger:
    include:
      - local: otel-exporter.yml
