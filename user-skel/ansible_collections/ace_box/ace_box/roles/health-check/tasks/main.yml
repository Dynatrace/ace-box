# Copyright 2024 Dynatrace LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

- name: Set Application URL
  set_fact:
    app_url: "{{ ingress_protocol }}://{{ application_domain }}"

- name: Debug the application URL
  debug:
    msg: "Application URL to health check: {{ app_url }}"

- name: Check application availability with curl
  command: "curl -o /dev/null -s -w \"%{http_code}\" {{ app_url }}"
  register: curl_response
  until: curl_response.rc == 0 and curl_response.stdout | int in range(200, 400)
  retries: 5
  delay: 10
  failed_when: curl_response.rc != 0

# - name: Debug the curl response
#   debug:
#     msg: "curl response: {{ curl_response }}"

- name: Check if application is accessible
  debug:
    msg: "Application is accessible via {{ ingress_protocol }}. Response: {{ curl_response.stdout }}"
  when: curl_response.rc == 0 and curl_response.stdout | int in range(200, 400)

- name: Fail if application is not accessible
  fail:
    msg: "Application is not accessible via {{ ingress_protocol }}. Response: {{ curl_response.stdout }}"
  when: curl_response.rc != 0 or curl_response.stdout | int not in range(200, 400)


- name: Check SSL certificate validity
  shell: |
    echo | openssl s_client -connect {{ app_url | regex_replace('^https?://', '') }}:443 -servername {{ app_url | regex_replace('^https?://', '') }} 2>/dev/null | openssl x509 -noout -dates -subject -issuer -ext subjectAltName
  when: app_url is search("https")
  register: ssl_check
  failed_when: ssl_check.rc != 0

- name: Debug SSL certificate validity
  debug:
    msg: "{{ ssl_check.stdout }}"
  when: app_url is search("https")

- name: Extract certificate domains
  set_fact:
    cert_domains: "{{ ssl_check.stdout | regex_findall('DNS:([^,]+)') }}"
  when: app_url is search("https")

- name: Check if certificate matches the domain name
  set_fact:
    domain_match: "{{ cert_domains | select('match', '^' + (app_url | regex_replace('^https?://', '') | regex_replace('^.*?\\.', '*\\.')).replace('*', '.*') + '$') | list | length > 0 }}"
  when: app_url is search("https")
    
- name: Debug SSL certificate domains
  debug:
    msg: "Certificate domains: {{ cert_domains }}"
  when: app_url is search("https")


- name: Debug expected domain
  debug:
    msg: "Expected domain: {{ app_url | regex_replace('^https?://', '') }}"

- name: Fail if SSL certificate does not match the domain name
  fail:
    msg: "SSL certificate does not match the domain name. Certificate domains: {{ cert_domains }}"
  when: app_url is search("https") and not domain_match