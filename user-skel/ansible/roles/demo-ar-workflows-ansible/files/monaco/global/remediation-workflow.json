{
  "title": "{{ .name }}",
  "taskDefaults": {},
  "usages": [],
  "description": "",
  "labels": {},
  "isPrivate": false,
  "triggerType": "Event",
  "schemaVersion": 3,
  "trigger": {
    "eventTrigger": {
      "isActive": false,
      "filterQuery": "event.kind == \"DAVIS_PROBLEM\" AND (event.category == \"ERROR\") AND (isNotNull(root_cause_entity_id))",
      "uniqueExpression": "{{`{{ event()[\"event.id\"] }}-{{ event()[\"event.category\"] }}-{{ event()[\"event.status\"] }}`}}",
      "triggerConfiguration": {
        "type": "davis-problem",
        "value": {
          "categories": {
            "error": true
          },
          "customFilter": "isNotNull(root_cause_entity_id)",
          "onProblemClose": true
        }
      }
    }
  },
  "tasks": {
    "detect_remediation_actions": {
      "name": "detect_remediation_actions",
      "input": {
        "query": "fetch events\n| filter event.type == \"CUSTOM_CONFIGURATION\" OR event.type == \"CUSTOM_DEPLOYMENT\" AND dt.entity.service == \"` event()['root_cause_entity_id'] `\"\n| filter remediationAction != \"0\" AND remediationAction != \"\" AND isNotNull(remediationAction)\n| filter remediationType != \"0\" AND remediationType != \"\" AND isNotNull(remediationType)\n| fields remediationAction, remediationType, timestamp\n| sort timestamp DESC"
      },
      "action": "dynatrace.automations:execute-dql-query",
      "position": {
        "x": 0,
        "y": 1
      },
      "conditions": {
        "custom": "{{`{{ event()['event.status'] == \"ACTIVE\" }}`}}",
        "states": {}
      },
      "description": "Executes DQL query",
      "predecessors": []
    },
    "trigger_ansible_remediation": {
      "name": "trigger_ansible_remediation",
      "input": {
        "url": "{{`{{ result(\"detect_remediation_actions\").records[0].remediationAction }}`}}",
        "method": "POST",
        "headers": {
          "Content-Type": "application/json",
          "Authorization": "Basic {{ .awx_basic_auth }}"
        }
      },
      "action": "dynatrace.automations:http-function",
      "position": {
        "x": 0,
        "y": 2
      },
      "conditions": {
        "states": {
          "detect_remediation_actions": "SUCCESS"
        }
      },
      "description": "Issue an HTTP request to any API",
      "predecessors": ["detect_remediation_actions"]
    },
    "update_problem_on_remediation_start": {
      "name": "update_problem_on_remediation_start",
      "input": {
        "script": "import { execution } from '@dynatrace-sdk/automation-utils';\nimport { problemsClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nconst main = async ({ execution_id }) => {\n  // Get details of current workflow\n  const ex = await execution(execution_id);\n  const event = ex?.params?.event || {};\n  const problemId = event['event.id'];\n\n  const config = {\n    problemId,\n    body: {\n      context: \"ACE-Box - Auto Remediation\",\n      message: \"Remediation action triggered!\"\n    }\n  }\n  console.log(config)\n  await problemsClient.createComment(config);\n}\n\nexport { main as default };\n"
      },
      "action": "dynatrace.automations:run-javascript",
      "position": {
        "x": 0,
        "y": 3
      },
      "conditions": {
        "states": {
          "trigger_ansible_remediation": "SUCCESS"
        }
      },
      "description": "Build a custom task running js Code",
      "predecessors": ["trigger_ansible_remediation"]
    },
    "get_owners": {
      "name": "get_owners",
      "input": {
        "entityIds": "{{`{{ event()['root_cause_entity_id'] }}`}}",
        "responsibilities": []
      },
      "action": "dynatrace.ownership:get-ownership-from-entity",
      "position": {
        "x": 1,
        "y": 2
      },
      "conditions": {
        "states": {
          "detect_remediation_actions": "SUCCESS"
        }
      },
      "description": "Retrieves entity and extracts ownership data from it.",
      "predecessors": ["detect_remediation_actions"]
    }
  }
}
