- name: ActiveGate - Download ActiveGate installer
  get_url:
    url: "{{ dynatrace_tenant_url }}/api/v1/deployment/installer/gateway/unix/latest?arch=x86&flavor=default"
    dest: "{{ activegate_download_location }}"
    mode: +x
    timeout: 300
    headers:
      Authorization: "Api-token {{ dynatrace_paas_token }}"
<<<<<<< HEAD
  when: feature_activegate and not "{{ activegate_download_location }}" is exists
=======
>>>>>>> 4a688d6 (migrate Ansible tasks to roles)

- name: ActiveGate - Install synthetic-enabled ActiveGate
  shell:
    cmd: DYNATRACE_SYNTHETIC_AUTO_INSTALL=true /bin/sh "{{ activegate_download_location }}" --enable-synthetic
<<<<<<< HEAD
    creates: "{{ activegate_uninstall_script_location }}"
  when: feature_activegate
=======
    creates: /opt/dynatrace/synthetic/uninstall.sh
>>>>>>> 4a688d6 (migrate Ansible tasks to roles)

- name: ActiveGate - Update dnsEntryPoint on custom.properties
  blockinfile:
    path: /var/lib/dynatrace/gateway/config/custom.properties
    insertafter: "proxy-off = true"
    block: |
      [connectivity]
      dnsEntryPoint = http://{{ ansible_facts.fqdn }}:9999
<<<<<<< HEAD
  when: feature_activegate
=======
>>>>>>> 4a688d6 (migrate Ansible tasks to roles)

- name: ActiveGate - Restart ActiveGate service
  service:
    name: dynatracegateway
    state: restarted
<<<<<<< HEAD
  ignore_errors: yes
  when: feature_activegate

- name: ActiveGate - Get node id
  include: roles/dt-activegate/tasks/source-node-id.yml
=======

- name: ActiveGate - Get all Synthetic nodes
  uri:
    url: "{{ dynatrace_tenant_url }}/api/v1/synthetic/nodes"
    method: GET
    headers:
      Content-Type: "application/json"
      Authorization: "Api-token {{ dynatrace_api_token }}"
    return_content: no
    status_code: 200, 201, 204
  register: nodesresponse
  when: acebox_mode == 'demo'
  until: nodesresponse.json | json_query("nodes[?hostname=='{{ ansible_facts.fqdn }}'].entityId")
  retries: 15
  delay: 10

- name: ActiveGate - Set synthetic node entityId
  set_fact:
    dt_node_id: "{{ item }}"
  loop: "{{ nodesresponse.json | json_query(synthetic_nodes_query) }}"
  vars:
    synthetic_nodes_query: "nodes[?hostname=='{{ ansible_facts.fqdn }}'].entityId"
  when: acebox_mode == 'demo' and item != ""
>>>>>>> 4a688d6 (migrate Ansible tasks to roles)

- name: ActiveGate - Restart Docker service
  service:
    name: docker
    state: restarted
<<<<<<< HEAD
  when: feature_activegate
=======
>>>>>>> 4a688d6 (migrate Ansible tasks to roles)
