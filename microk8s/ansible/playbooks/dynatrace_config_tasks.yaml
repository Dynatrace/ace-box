- name: Get all autotags
  uri:
    url: "{{ dynatrace_tenant_url }}/api/config/v1/autoTags"
    method: GET
    headers:
      Content-Type: "application/json"
      Authorization: "Api-token {{ dynatrace_api_token }}"
    return_content: no
    status_code: 200, 201, 204
  register: autotagsresponse

- name: Set autoTagId for environment
  set_fact:
    tags_environment_id: "{{ item }}"
  loop: "{{ autotagsresponse.json | json_query(autoTag_query) }}"
  vars:
    autoTag_query: "values[?name=='environment'].id"
  when: item != ""


- name: Create autoTag for environment
  uri:
    url: "{{ dynatrace_tenant_url }}/api/config/v1/autoTags"
    method: POST
    headers:
      Content-Type: "application/json"
      Authorization: "Api-token {{ dynatrace_api_token }}"
    body_format: json
    body: '{
      "name": "environment",
      "rules": [
        {
          "type": "PROCESS_GROUP",
          "enabled": true,
          "valueFormat": "{ProcessGroup:KubernetesNamespace}",
          "propagationTypes": [
            "PROCESS_GROUP_TO_SERVICE"
          ],
          "conditions": [
            {
              "key": {
                "attribute": "PROCESS_GROUP_PREDEFINED_METADATA",
                "dynamicKey": "KUBERNETES_NAMESPACE",
                "type": "PROCESS_PREDEFINED_METADATA_KEY"
              },
              "comparisonInfo": {
                "type": "STRING",
                "operator": "EXISTS",
                "value": null,
                "negate": false,
                "caseSensitive": null
              }
            }
          ]
        }
      ]
          }'
    return_content: no
    status_code: 200, 201, 204
  when: tags_environment_id is not defined

- name: Update autoTag for environment
  uri:
    url: "{{ dynatrace_tenant_url }}/api/config/v1/autoTags/{{ tags_environment_id }}"
    method: PUT
    headers:
      Content-Type: "application/json"
      Authorization: "Api-token {{ dynatrace_api_token }}"
    body_format: json
    body: '{
      "name": "environment",
      "rules": [
        {
          "type": "PROCESS_GROUP",
          "enabled": true,
          "valueFormat": "{ProcessGroup:KubernetesNamespace}",
          "propagationTypes": [
            "PROCESS_GROUP_TO_SERVICE"
          ],
          "conditions": [
            {
              "key": {
                "attribute": "PROCESS_GROUP_PREDEFINED_METADATA",
                "dynamicKey": "KUBERNETES_NAMESPACE",
                "type": "PROCESS_PREDEFINED_METADATA_KEY"
              },
              "comparisonInfo": {
                "type": "STRING",
                "operator": "EXISTS",
                "value": null,
                "negate": false,
                "caseSensitive": null
              }
            }
          ]
        }
      ]
          }'
    return_content: no
    status_code: 200, 201, 204
  when: tags_environment_id is defined

- name: Set autoTagId for app
  set_fact:
    tags_app_id: "{{ item }}"
  loop: "{{ autotagsresponse.json | json_query(autoTag_query) }}"
  vars:
    autoTag_query: "values[?name=='app'].id"
  when: item != ""


- name: Create autoTag for app
  uri:
    url: "{{ dynatrace_tenant_url }}/api/config/v1/autoTags"
    method: POST
    headers:
      Content-Type: "application/json"
      Authorization: "Api-token {{ dynatrace_api_token }}"
    body_format: json
    body: '{
      "name": "app",
      "rules": [
        {
          "type": "PROCESS_GROUP",
          "enabled": true,
          "valueFormat": "{ProcessGroup:KubernetesContainerName}",
          "propagationTypes": [
            "PROCESS_GROUP_TO_SERVICE"
          ],
          "conditions": [
            {
              "key": {
                "attribute": "PROCESS_GROUP_PREDEFINED_METADATA",
                "dynamicKey": "KUBERNETES_CONTAINER_NAME",
                "type": "PROCESS_PREDEFINED_METADATA_KEY"
              },
              "comparisonInfo": {
                "type": "STRING",
                "operator": "EXISTS",
                "value": null,
                "negate": false,
                "caseSensitive": null
              }
            }
          ]
        }
      ]
          }'
    return_content: no
    status_code: 200, 201, 204
  when: tags_app_id is not defined

- name: Update autoTag for app
  uri:
    url: "{{ dynatrace_tenant_url }}/api/config/v1/autoTags/{{ tags_app_id }}"
    method: PUT
    headers:
      Content-Type: "application/json"
      Authorization: "Api-token {{ dynatrace_api_token }}"
    body_format: json
    body: '{
      "name": "app",
      "rules": [
        {
          "type": "PROCESS_GROUP",
          "enabled": true,
          "valueFormat": "{ProcessGroup:KubernetesContainerName}",
          "propagationTypes": [
            "PROCESS_GROUP_TO_SERVICE"
          ],
          "conditions": [
            {
              "key": {
                "attribute": "PROCESS_GROUP_PREDEFINED_METADATA",
                "dynamicKey": "KUBERNETES_CONTAINER_NAME",
                "type": "PROCESS_PREDEFINED_METADATA_KEY"
              },
              "comparisonInfo": {
                "type": "STRING",
                "operator": "EXISTS",
                "value": null,
                "negate": false,
                "caseSensitive": null
              }
            }
          ]
        }
      ]
          }'
    return_content: no
    status_code: 200, 201, 204
  when: tags_app_id is defined

- name: Get all request attributes
  uri:
    url: "{{ dynatrace_tenant_url }}/api/config/v1/service/requestAttributes"
    method: GET
    headers:
      Content-Type: "application/json"
      Authorization: "Api-token {{ dynatrace_api_token }}"
    return_content: no
    status_code: 200, 201, 204
  register: reqattribresponse


- set_fact:
    ra_id: ""

- set_fact:
    ra_name: "LSN"

- name: "Set requestAttributeId for {{ ra_name }}"
  set_fact:
    ra_id: "{{ item }}"
  loop: "{{ reqattribresponse.json | json_query(ra_query) }}"
  vars:
    ra_query: "values[?name=='{{ ra_name }}'].id"
  when: item != ""

- name: "Create requestAttribute for {{ ra_name }}"
  uri:
    url: "{{ dynatrace_tenant_url }}/api/config/v1/service/requestAttributes"
    method: POST
    headers:
      Content-Type: "application/json"
      Authorization: "Api-token {{ dynatrace_api_token }}"
    body_format: json
    body: '{
      "name": "{{ ra_name }}",
      "enabled": true,
      "dataType": "STRING",
      "dataSources": [
        {
          "enabled": true,
          "source": "REQUEST_HEADER",
          "valueProcessing": {
            "splitAt": "",
            "trim": false,
            "extractSubstring": {
              "position": "BETWEEN",
              "delimiter": "{{ ra_name }}=",
              "endDelimiter": ";"
            }
          },
          "parameterName": "x-dynatrace-test",
          "capturingAndStorageLocation": "CAPTURE_AND_STORE_ON_SERVER"
        }
      ],
      "normalization": "ORIGINAL",
      "aggregation": "FIRST",
      "confidential": false,
      "skipPersonalDataMasking": false
          }'
    return_content: no
    status_code: 200, 201, 204
  when: ra_id == ""

- name: "Update requestAttribute for {{ ra_name }}"
  uri:
    url: "{{ dynatrace_tenant_url }}/api/config/v1/service/requestAttributes/{{ ra_id }}"
    method: PUT
    headers:
      Content-Type: "application/json"
      Authorization: "Api-token {{ dynatrace_api_token }}"
    body_format: json
    body: '{
      "name": "{{ ra_name }}",
      "enabled": true,
      "dataType": "STRING",
      "dataSources": [
        {
          "enabled": true,
          "source": "REQUEST_HEADER",
          "valueProcessing": {
            "splitAt": "",
            "trim": false,
            "extractSubstring": {
              "position": "BETWEEN",
              "delimiter": "{{ ra_name }}=",
              "endDelimiter": ";"
            }
          },
          "parameterName": "x-dynatrace-test",
          "capturingAndStorageLocation": "CAPTURE_AND_STORE_ON_SERVER"
        }
      ],
      "normalization": "ORIGINAL",
      "aggregation": "FIRST",
      "confidential": false,
      "skipPersonalDataMasking": false
          }'
    return_content: no
    status_code: 200, 201, 204
  when: ra_id != ""

- set_fact:
    ra_id: ""

- set_fact:
    ra_name: "TSN"

- name: "Set requestAttributeId for {{ ra_name }}"
  set_fact:
    ra_id: "{{ item }}"
  loop: "{{ reqattribresponse.json | json_query(ra_query) }}"
  vars:
    ra_query: "values[?name=='{{ ra_name }}'].id"
  when: item != ""

- name: "Create requestAttribute for {{ ra_name }}"
  uri:
    url: "{{ dynatrace_tenant_url }}/api/config/v1/service/requestAttributes"
    method: POST
    headers:
      Content-Type: "application/json"
      Authorization: "Api-token {{ dynatrace_api_token }}"
    body_format: json
    body: '{
      "name": "{{ ra_name }}",
      "enabled": true,
      "dataType": "STRING",
      "dataSources": [
        {
          "enabled": true,
          "source": "REQUEST_HEADER",
          "valueProcessing": {
            "splitAt": "",
            "trim": false,
            "extractSubstring": {
              "position": "BETWEEN",
              "delimiter": "{{ ra_name }}=",
              "endDelimiter": ";"
            }
          },
          "parameterName": "x-dynatrace-test",
          "capturingAndStorageLocation": "CAPTURE_AND_STORE_ON_SERVER"
        }
      ],
      "normalization": "ORIGINAL",
      "aggregation": "FIRST",
      "confidential": false,
      "skipPersonalDataMasking": false
          }'
    return_content: no
    status_code: 200, 201, 204
  when: ra_id == ""

- name: "Update requestAttribute for {{ ra_name }}"
  uri:
    url: "{{ dynatrace_tenant_url }}/api/config/v1/service/requestAttributes/{{ ra_id }}"
    method: PUT
    headers:
      Content-Type: "application/json"
      Authorization: "Api-token {{ dynatrace_api_token }}"
    body_format: json
    body: '{
      "name": "{{ ra_name }}",
      "enabled": true,
      "dataType": "STRING",
      "dataSources": [
        {
          "enabled": true,
          "source": "REQUEST_HEADER",
          "valueProcessing": {
            "splitAt": "",
            "trim": false,
            "extractSubstring": {
              "position": "BETWEEN",
              "delimiter": "{{ ra_name }}=",
              "endDelimiter": ";"
            }
          },
          "parameterName": "x-dynatrace-test",
          "capturingAndStorageLocation": "CAPTURE_AND_STORE_ON_SERVER"
        }
      ],
      "normalization": "ORIGINAL",
      "aggregation": "FIRST",
      "confidential": false,
      "skipPersonalDataMasking": false
          }'
    return_content: no
    status_code: 200, 201, 204
  when: ra_id != ""

- set_fact:
    ra_id: ""

- set_fact:
    ra_name: "LTN"

- name: "Set requestAttributeId for {{ ra_name }}"
  set_fact:
    ra_id: "{{ item }}"
  loop: "{{ reqattribresponse.json | json_query(ra_query) }}"
  vars:
    ra_query: "values[?name=='{{ ra_name }}'].id"
  when: item != ""

- name: "Create requestAttribute for {{ ra_name }}"
  uri:
    url: "{{ dynatrace_tenant_url }}/api/config/v1/service/requestAttributes"
    method: POST
    headers:
      Content-Type: "application/json"
      Authorization: "Api-token {{ dynatrace_api_token }}"
    body_format: json
    body: '{
      "name": "{{ ra_name }}",
      "enabled": true,
      "dataType": "STRING",
      "dataSources": [
        {
          "enabled": true,
          "source": "REQUEST_HEADER",
          "valueProcessing": {
            "splitAt": "",
            "trim": false,
            "extractSubstring": {
              "position": "BETWEEN",
              "delimiter": "{{ ra_name }}=",
              "endDelimiter": ";"
            }
          },
          "parameterName": "x-dynatrace-test",
          "capturingAndStorageLocation": "CAPTURE_AND_STORE_ON_SERVER"
        }
      ],
      "normalization": "ORIGINAL",
      "aggregation": "FIRST",
      "confidential": false,
      "skipPersonalDataMasking": false
          }'
    return_content: no
    status_code: 200, 201, 204
  when: ra_id == ""

- name: "Update requestAttribute for {{ ra_name }}"
  uri:
    url: "{{ dynatrace_tenant_url }}/api/config/v1/service/requestAttributes/{{ ra_id }}"
    method: PUT
    headers:
      Content-Type: "application/json"
      Authorization: "Api-token {{ dynatrace_api_token }}"
    body_format: json
    body: '{
      "name": "{{ ra_name }}",
      "enabled": true,
      "dataType": "STRING",
      "dataSources": [
        {
          "enabled": true,
          "source": "REQUEST_HEADER",
          "valueProcessing": {
            "splitAt": "",
            "trim": false,
            "extractSubstring": {
              "position": "BETWEEN",
              "delimiter": "{{ ra_name }}=",
              "endDelimiter": ";"
            }
          },
          "parameterName": "x-dynatrace-test",
          "capturingAndStorageLocation": "CAPTURE_AND_STORE_ON_SERVER"
        }
      ],
      "normalization": "ORIGINAL",
      "aggregation": "FIRST",
      "confidential": false,
      "skipPersonalDataMasking": false
          }'
    return_content: no
    status_code: 200, 201, 204
  when: ra_id != ""


- name: Get all Calculated Service Metrics
  uri:
    url: "{{ dynatrace_tenant_url }}/api/config/v1/calculatedMetrics/service"
    method: GET
    headers:
      Content-Type: "application/json"
      Authorization: "Api-token {{ dynatrace_api_token }}"
    return_content: no
    status_code: 200, 201, 204
  register: csmresponse

- name: Set Calculated Service Metric for simplenode.staging
  set_fact:
    csm_simplenode_id: "{{ item }}"
  loop: "{{ csmresponse.json | json_query(autoTag_query) }}"
  vars:
    autoTag_query: "values[?name=='simplenode.staging'].id"
  when: item != ""


- name: Create calc:service.simplenode.staging
  uri:
    url: "{{ dynatrace_tenant_url }}/api/config/v1/calculatedMetrics/service"
    method: POST
    headers:
      Content-Type: "application/json"
      Authorization: "Api-token {{ dynatrace_api_token }}"
    body_format: json
    body: '{
      "tsmMetricKey": "calc:service.simplenode.staging",
      "name": "simplenode.staging",
      "enabled": true,
      "metricDefinition": {
        "metric": "RESPONSE_TIME",
        "requestAttribute": null
      },
      "unit": "MICRO_SECOND",
      "unitDisplayName": "",
      "entityId": "SERVICE-6B5362A1398963FF",
      "managementZones": [],
      "conditions": [],
      "dimensionDefinition": {
        "name": "method",
        "dimension": "{Request:Name}",
        "placeholders": [],
        "topX": 10,
        "topXDirection": "DESCENDING",
        "topXAggregation": "AVERAGE"
      }
          }'
    return_content: no
    status_code: 200, 201, 204
  when: csm_simplenode_id is not defined

- name: Update calc:service.simplenode.staging
  uri:
    url: "{{ dynatrace_tenant_url }}/api/config/v1/calculatedMetrics/service{{ csm_simplenode_id }}"
    method: PUT
    headers:
      Content-Type: "application/json"
      Authorization: "Api-token {{ dynatrace_api_token }}"
    body_format: json
    body: '{
      "tsmMetricKey": "calc:service.simplenode.staging",
      "name": "simplenode.staging",
      "enabled": true,
      "metricDefinition": {
        "metric": "RESPONSE_TIME",
        "requestAttribute": null
      },
      "unit": "MICRO_SECOND",
      "unitDisplayName": "",
      "entityId": "SERVICE-6B5362A1398963FF",
      "managementZones": [],
      "conditions": [],
      "dimensionDefinition": {
        "name": "method",
        "dimension": "{Request:Name}",
        "placeholders": [],
        "topX": 10,
        "topXDirection": "DESCENDING",
        "topXAggregation": "AVERAGE"
      }
          }'
    return_content: no
    status_code: 200, 201, 204
  when: csm_simplenode_id is defined
    