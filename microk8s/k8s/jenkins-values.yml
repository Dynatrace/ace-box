master:
  # Used for label app.kubernetes.io/component
  componentName: "jenkins-master"
  image: "jenkins/jenkins"
  tag: "lts"
  adminPassword: "dynatrace"
  serviceType: "NodePort"
  nodePort: 31000
  jobs:
    # Test_docker: |-
    #   <?xml version='1.1' encoding='UTF-8'?>
    #   <flow-definition plugin="workflow-job@2.33">
    #     <actions>
    #       <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
    #       <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.9">
    #         <jobProperties/>
    #         <triggers/>
    #         <parameters/>
    #         <options/>
    #       </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    #     </actions>
    #     <description></description>
    #     <keepDependencies>false</keepDependencies>
    #     <properties/>
    #     <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
    #       <script>pipeline {
    #     agent {
    #       kubernetes {
    #         // this label will be the prefix of the generated pod&apos;s name
    #         label &apos;jenkins-docker-agent&apos;
    #         yaml &quot;&quot;&quot;
    #   apiVersion: v1
    #   kind: Pod
    #   metadata:
    #     labels:
    #       component: ci
    #   spec:
    #     containers:
    #       - name: docker
    #         image: docker
    #         command:
    #           - cat
    #         tty: true
    #         volumeMounts:
    #           - mountPath: /var/run/docker.sock
    #             name: docker-sock
    #     volumes:
    #       - name: docker-sock
    #         hostPath:
    #           path: /var/snap/microk8s/current/docker.sock
    #   &quot;&quot;&quot;
    #       }
    #     }
      
    #     stages {
    #       stage(&apos;Test docker&apos;) {
    #         steps {
    #           container(&apos;docker&apos;) {
    #             sh &quot;docker version &amp;&amp; docker run hello-world&quot;
    #           }
    #         }
    #       }
    #     }
    #   }</script>
    #       <sandbox>true</sandbox>
    #     </definition>
    #     <triggers/>
    #     <disabled>false</disabled>
    # Deploy_salaryapp: |-
    #   <?xml version='1.1' encoding='UTF-8'?>
    #   <flow-definition plugin="workflow-job@2.33">
    #     <actions>
    #       <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
    #       <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.9">
    #         <jobProperties/>
    #         <triggers/>
    #         <parameters/>
    #         <options/>
    #       </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    #     </actions>
    #     <description>Deploy golang app with nginx front, working with mongodb</description>
    #     <keepDependencies>false</keepDependencies>
    #     <properties>
    #       <hudson.model.ParametersDefinitionProperty>
    #         <parameterDefinitions>
    #           <hudson.model.ChoiceParameterDefinition>
    #             <name>ENV</name>
    #             <description>where to deploy</description>
    #             <choices class="java.util.Arrays$ArrayList">
    #               <a class="string-array">
    #                 <string>staging</string>
    #                 <string>production</string>
    #               </a>
    #             </choices>
    #           </hudson.model.ChoiceParameterDefinition>
    #           <hudson.model.ChoiceParameterDefinition>
    #             <name>FRONTREPL</name>
    #             <description>Number of front replicas</description>
    #             <choices class="java.util.Arrays$ArrayList">
    #               <a class="string-array">
    #                 <string>1</string>
    #                 <string>2</string>
    #                 <string>3</string>
    #               </a>
    #             </choices>
    #           </hudson.model.ChoiceParameterDefinition>
    #           <hudson.model.ChoiceParameterDefinition>
    #             <name>BACKREPL</name>
    #             <description>Number of backend replicas</description>
    #             <choices class="java.util.Arrays$ArrayList">
    #               <a class="string-array">
    #                 <string>1</string>
    #                 <string>2</string>
    #                 <string>3</string>
    #               </a>
    #             </choices>
    #           </hudson.model.ChoiceParameterDefinition>
    #         </parameterDefinitions>
    #       </hudson.model.ParametersDefinitionProperty>
    #     </properties>
    #     <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
    #       <script>pipeline {
    #     agent {
    #       kubernetes {
    #         label &apos;jenkins-docker-agent&apos;
    #         yaml &quot;&quot;&quot;
    #   apiVersion: v1
    #   kind: Pod
    #   metadata:
    #     labels:
    #       component: ci
    #   spec:
    #     containers:
    #       - name: docker
    #         image: docker
    #         command: [&quot;cat&quot;]
    #         tty: true
    #         volumeMounts:
    #           - mountPath: /var/run/docker.sock
    #             name: docker-sock
    #       - name: helm-cli
    #         image: ibmcom/k8s-helm:v2.6.0
    #         command: [&quot;cat&quot;]
    #         tty: true
    #     volumes:
    #       - name: docker-sock
    #         hostPath:
    #           path: /var/snap/microk8s/current/docker.sock
    #   &quot;&quot;&quot;
    #       }
    #     }
      
    #     stages {
    #       stage(&apos;Git checkout&apos;) {
    #         steps {
    #           git url: &apos;https://github.com/ganochenkodg/vagrant-microk8s.git&apos;
    #         }
    #       }
    #       stage(&apos;Build docker&apos;) {
    #         steps {
    #           container(&apos;docker&apos;) {
    #             sh &quot;docker build -t 127.0.0.1:32000/salaryweb ./docker/salaryweb&quot;
    #             sh &quot;docker push 127.0.0.1:32000/salaryweb&quot;
    #             sh &quot;docker build -t 127.0.0.1:32000/salaryapi:master-${BUILD_NUMBER} -t 127.0.0.1:32000/salaryapi:latest ./docker/salaryapi&quot;
    #             sh &quot;docker push 127.0.0.1:32000/salaryapi&quot;
    #           }
    #         }
    #       }
    #       stage(&apos;Deploy to env&apos;) {
    #         steps {
    #           container(&apos;helm-cli&apos;) {
    #             script {
    #               def MongoPort = &quot;27017&quot;
    #               def NodePort = &quot;31200&quot;
    #               if (params.ENV.equals(&quot;staging&quot;)) {
    #                   MongoPort = &quot;27018&quot;
    #                   NodePort = &quot;31100&quot;
    #               }
    #               sh &quot;/helm upgrade ${params.ENV}-salaryapi ./helm-charts/salaryapi/ --install --namespace ${params.ENV} --set mongoport=${MongoPort},replicasnum=${params.BACKREPL},contversion=${BUILD_NUMBER}&quot;
    #               sh &quot;/helm upgrade ${params.ENV}-salaryweb ./helm-charts/salaryweb/ --install --namespace ${params.ENV} --set replicasnum=${params.FRONTREPL},nodeport=${NodePort}&quot;
    #             }
    #           }
    #         }
    #       }
    #     }
    #   }
    #   </script>
    #       <sandbox>true</sandbox>
    #     </definition>
    #     <triggers/>
    #     <disabled>false</disabled>
    # Deploy_books: |-
    #   <?xml version='1.1' encoding='UTF-8'?>
    #   <flow-definition plugin="workflow-job@2.33">
    #     <actions>
    #       <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
    #       <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.9">
    #         <jobProperties/>
    #         <triggers/>
    #         <parameters/>
    #         <options/>
    #       </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    #     </actions>
    #     <description>Deploy simple crud app on vue and nodejs</description>
    #     <keepDependencies>false</keepDependencies>
    #     <properties>
    #       <hudson.model.ParametersDefinitionProperty>
    #         <parameterDefinitions>
    #           <hudson.model.ChoiceParameterDefinition>
    #             <name>ENV</name>
    #             <description>where to deploy</description>
    #             <choices class="java.util.Arrays$ArrayList">
    #               <a class="string-array">
    #                 <string>staging</string>
    #                 <string>production</string>
    #               </a>
    #             </choices>
    #           </hudson.model.ChoiceParameterDefinition>
    #           <hudson.model.ChoiceParameterDefinition>
    #             <name>FRONTREPL</name>
    #             <description>Number of front replicas</description>
    #             <choices class="java.util.Arrays$ArrayList">
    #               <a class="string-array">
    #                 <string>1</string>
    #                 <string>2</string>
    #                 <string>3</string>
    #               </a>
    #             </choices>
    #           </hudson.model.ChoiceParameterDefinition>
    #           <hudson.model.ChoiceParameterDefinition>
    #             <name>BACKREPL</name>
    #             <description>Number of backend replicas</description>
    #             <choices class="java.util.Arrays$ArrayList">
    #               <a class="string-array">
    #                 <string>1</string>
    #                 <string>2</string>
    #                 <string>3</string>
    #               </a>
    #             </choices>
    #           </hudson.model.ChoiceParameterDefinition>
    #         </parameterDefinitions>
    #       </hudson.model.ParametersDefinitionProperty>
    #     </properties>
    #     <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
    #       <script>pipeline {
    #     agent {
    #       kubernetes {
    #         label &apos;jenkins-docker-agent&apos;
    #         yaml &quot;&quot;&quot;
    #   apiVersion: v1
    #   kind: Pod
    #   metadata:
    #     labels:
    #       component: ci
    #   spec:
    #     containers:
    #       - name: docker
    #         image: docker
    #         command: [&quot;cat&quot;]
    #         tty: true
    #         volumeMounts:
    #           - mountPath: /var/run/docker.sock
    #             name: docker-sock
    #       - name: helm-cli
    #         image: ibmcom/k8s-helm:v2.6.0
    #         command: [&quot;cat&quot;]
    #         tty: true
    #     volumes:
    #       - name: docker-sock
    #         hostPath:
    #           path: /var/snap/microk8s/current/docker.sock
    #   &quot;&quot;&quot;
    #       }
    #     }
      
    #     stages {
    #       stage(&apos;Git checkout&apos;) {
    #         steps {
    #           git url: &apos;https://github.com/ganochenkodg/vagrant-microk8s.git&apos;
    #         }
    #       }
    #       stage(&apos;Build docker&apos;) {
    #         steps {
    #           container(&apos;docker&apos;) {
    #             sh &quot;docker build -t 127.0.0.1:32000/crud-frontend:master-${BUILD_NUMBER} -t 127.0.0.1:32000/crud-frontend:latest ./docker/crud-frontend&quot;
    #             sh &quot;docker push 127.0.0.1:32000/crud-frontend&quot;
    #             sh &quot;docker build -t 127.0.0.1:32000/crud-backend:master-${BUILD_NUMBER} -t 127.0.0.1:32000/crud-backend:latest ./docker/crud-backend&quot;
    #             sh &quot;docker push 127.0.0.1:32000/crud-backend&quot;
    #           }
    #         }
    #       }
    #       stage(&apos;Deploy to env&apos;) {
    #         steps {
    #           container(&apos;helm-cli&apos;) {
    #             script {
    #               def MongoPort = &quot;27020&quot;
    #               def NodePort = &quot;31400&quot;
    #               if (params.ENV.equals(&quot;staging&quot;)) {
    #                   MongoPort = &quot;27019&quot;
    #                   NodePort = &quot;31300&quot;
    #               }
    #               sh &quot;/helm upgrade ${params.ENV}-crud-backend ./helm-charts/crud-backend/ --install --namespace ${params.ENV} --set mongoport=${MongoPort},replicasnum=${params.BACKREPL},contversion=${BUILD_NUMBER}&quot;
    #               sh &quot;/helm upgrade ${params.ENV}-crud-books ./helm-charts/crud-frontend/ --install --namespace ${params.ENV} --set replicasnum=${params.FRONTREPL},nodeport=${NodePort},contversion=${BUILD_NUMBER}&quot;
    #             }
    #           }
    #         }
    #       }
    #     }
    #   }
    #   </script>
    #       <sandbox>true</sandbox>
    #     </definition>
    #     <triggers/>
    #     <disabled>false</disabled>
agent:
  enabled: true
  image: "odavid/jenkins-jnlp-slave"
  tag: "3.29-1-15-alpine"

persistence:
  enabled: true
  existingClaim: "jenkins-pvc"